#!/bin/sh
# Copyright (C) 2020 Francois Gouget
#
# Installs the packages needed for Wine development.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
name0=`basename "$0"`


error()
{
    echo "$name0:error:" "$@" >&2
}

warning()
{
    echo "$name0:warning:" "$@" >&2
}

opt_dry_run=""

dry_run()
{
    local rc
    echo "$@"
    [ -z "$opt_dry_run" ] || return 0
    "$@"
    rc=$?
    [ $rc -ne 0 -a -n "$opt_dry_run" ] && echo " -> rc=$rc" >&2
    return $rc
}


#####
#
# Generic helpers
#
#####

pkginstall=""
pkgbroken=""
pkgmissing=""

wt_remove_bad_pkg()
{
    local pkg="$1"
    pkgbroken=`echo "$pkgbroken " | sed -e "s/ $pkg[^ ]*/ /g"`
    pkgmissing=`echo "$pkgmissing " | sed -e "s/ $pkg[^ ]*/ /g"`
}

wt_pretty_list()
{
    echo "$@" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed -e 's/^ //' -e 's/ $//'
}

wt_libdirs=""
wt_create_so_warn=1

# wt_create_so <sodev> <solib>
#
# Creates the <sodev>.so symlink pointing to the <solib>.so.<ver> library.
# If <solib> is omitted it is assumed to be identical to <sodev>.
# wt_create_so() also handles cases where the library is in /lib* rather than
# /usr/lib*.
#
# Returns 0 if the symlink was already present, 1 if it was successfully
# created, 2 if it could not be created.
wt_create_so()
{
    local libdir rc sover usrlibdir
    local sodev="$1"
    local solib="$2"
    [ -n "$solib" ] || solib="$sodev"
    if [ -z "$wt_libdirs" ]
    then
        error "the per-distribution code must set \$wt_libdirs"
        exit 1
    fi

    rc=0
    for libdir in $wt_libdirs
    do
        usrlibdir="/usr$libdir"
        if [ ! -f "$usrlibdir/$sodev.so" ]
        then
            sover=`cd "$usrlibdir" 2>/dev/null && ls "$solib.so".[0-9]* 2>/dev/null | head -n1`
            if [ ! -f "$usrlibdir/$sover" ]
            then
                # We want the full path in this case
                sover=`ls "$libdir/$solib.so".[0-9]* 2>/dev/null | head -n1`
                [ -f "$sover" ] || sover=""
            fi

            if [ -z "$sover" ]
            then
                error "Could not find the ...$libdir/$sodev.so symlink target"
                rc=2
            # Use -f because $sodev.so may be a broken symlink
            elif ! dry_run ln -s -f "$sover" "$usrlibdir/$sodev.so"
            then
                error "Could not create the ...$libdir/$sodev.so symlink"
                rc=2
            elif [ $rc -eq 0 ]
            then
                rc=1
            fi
        fi
    done
    if [ $rc -eq 2 -a -n "$wt_create_so_warn" ]
    then
        wt_create_so_warn=
        warning "The symlink creation will fail if the non-dev package is not installed."
        [ -n "$opt_dry_run" ] && warning "This is particularly likely with --dry-run."
    fi
    return $rc
}

# wt_create_sos <pkgdev> <sodev1> ...
#
# Create the development library symlinks in the <sodev1> ... list using
# wt_create_so(). If they all succeeded, remove <pkgdev> from the broken and
# missing packages lists.
wt_create_sos()
{
    local lib success
    local pkg="$1"
    shift

    fixed=""
    for lib in "$@"
    do
        wt_create_so "$lib"
        # Only mark a package as fixed if no error occurred and at least one
        # symlink was provided (if no symlink was provided the package is
        # presumably bad for other reasons).
        rc=$?
        [ $rc -eq 2 ] && fixed=0
        [ $rc -eq 1 -a -z "$fixed" ] && fixed=1
    done
    if [ "$fixed" = "1" ]
    then
        wt_remove_bad_pkg "$pkg"
    fi
}


#####
#
# Debian
#
#####

#
# Debian: Package helpers
#

# deb_pkg [--ignore] <pkg1> ...
#
# If <pkg1> exists, schedule it for installation and return success.
# Otherwise try again with the next package in the list.
#
# If none of the packages exist and --ignore was not specified, add them all
# to the missing packages list and return failure.
deb_pkg()
{
    local pkg pkgarch
    local ignore=
    if [ "$1" = "--ignore" ]
    then
        ignore=1
        shift
    fi

    echo "Checking $*..."
    for pkgarch in $*
    do
        pkg=`echo "$pkgarch" | sed -e "s/:.*//g"`
        if LANG= apt-cache show "$pkgarch" 2>/dev/null | grep -q "Package: $pkg"
        then
            pkginstall="$pkginstall $pkgarch"
            return 0
        fi
    done
    [ -z "$ignore" ] && pkgmissing="$pkgmissing "`echo "$@" | sed -e 's/ /|/g'`
    return 1
}

# deb_multi [--ignore] <pkg1> ...
#
# If <pkg1> exists:
# - If it supports multiarch schedule the installation of both 32- and 64-bit
#   versions and return success.
# - If it is architecture neutral schedule installation and return success.
# - Otherwise schedule installation of the native package, mark the 32-bit
#   version as broken and return failure.
#
# If <pkg1> does not exist, try again with the next package in the list.
# If none of the packages exists and --ignore was not specified, add them all
# to the missing packages list and return failure.
deb_multi()
{
    local pkg
    local ignore=
    if [ "$1" = "--ignore" ]
    then
        ignore=1
        shift
    fi

    echo "Checking multiarch $*..."
    for pkg in $*
    do
        LANG= apt-cache show "$pkg" 2>/dev/null | grep -q "Multi-Arch: same"
        if [ $? -eq 0 ]
        then
            pkginstall="$pkginstall $pkg:amd64 $pkg:i386"
            return 0
        elif LANG= apt-cache show "$pkg" 2>/dev/null | grep -q "Architecture: all"
        then
            pkginstall="$pkginstall $pkg"
            return 0
        elif LANG= apt-cache show "$pkg" 2>/dev/null | grep -q "Package: $pkg"
        then
            pkginstall="$pkginstall $pkg"
            [ -z "$ignore" ] && pkgbroken="$pkgbroken $pkg:i386"
            return 1
        fi
    done
    [ -z "$ignore" ] && pkgmissing="$pkgmissing "`echo "$@" | sed -e 's/ /|/g'`
    return 1
}

# deb_blacklist <canary> <version> <pkgdev> <pkglibs>
#
# This is meant to deal with cases where multiarch support in <pkgdev> is
# broken by the <canary> package in a hard to detect way.
#
# Checks the version of the <canary> package and if it matches <version>
# installs the native <pkgdev> package and the 32-bit <pkglibs> package and
# returns failure.
# Otherwise invokes deb_multi() on <pkgdev> || <pkglibs> and returns success.
deb_blacklist()
{
    local canary="$1"
    local version="$2"
    local pkgdev="$3"
    local pkglibs="$4"

    if LANG= apt-cache show "$canary" 2>/dev/null | grep -q "Version: $version"
    then
        warning "Bad version for $canary, not using multiarch for $pkgdev"
        deb_pkg "$pkgdev"
        deb_pkg "$pkglibs:i386"
        pkgbroken="$pkgbroken $pkgdev:i386"
        return 1
    fi
    deb_multi "$pkgdev" || deb_multi "$pkglibs"
    return 0
}

deb_install()
{
    if [ -z "$opt_dry_run" ]
    then
        echo -n "Waiting for the dpkg lock"
        while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ||
              fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ||
              fuser /var/run/unattended-upgrades.lock >/dev/null 2>&1
        do
            echo -n "."
            sleep 1
        done
        echo " done"
    fi
    dry_run apt install `wt_pretty_list "$pkginstall"` || exit 1
    echo
}


#
# Debian: Base Wine dependencies
#

deb_init()
{
    if [ `dpkg --print-architecture` != "amd64" ]
    then
        error "Expected a 64-bit Debian distribution"
        exit 1
    fi
    if [ -n "$opt_packages" ]
    then
        dry_run dpkg --add-architecture i386
        dry_run apt-get update
    fi
    wt_libdirs="/lib/i386-linux-gnu /lib/x86_64-linux-gnu"
}

deb_wine()
{
    deb_pkg   bison
    deb_pkg   flex
    deb_pkg   gcc
    deb_pkg   gcc-mingw-w64
    deb_pkg   gcc-multilib
    deb_pkg   git
    deb_multi libasound2-dev
    deb_multi libcapi20-dev
    deb_multi libdbus-1-dev
    deb_multi libfaudio-dev

    # The FontConfig development package can only be installed if the FreeType
    # one supports multiarch
    deb_pkg   libfreetype6-dev;   deb_multi libfreetype6
    deb_pkg   libfontconfig1-dev; deb_multi libfontconfig1
    deb_multi libfreetype6-dev && deb_multi libfontconfig1-dev

    deb_multi libgl1-mesa-dev
    deb_multi libglu1-mesa-dev

    # The GPhoto2 development package can only be installed if the Exif
    # one supports multiarch
    deb_pkg   libgphoto2-dev; deb_multi libgphoto2-6
    deb_multi --ignore libexif-dev && deb_multi libgphoto2-dev

    deb_multi libgsm1-dev
    # deb_multi  libhal-dev # Libhal is obsolete and usually not available

    # The GnuTLS development package can only be installed if the idn2 one
    # one supports multiarch
    deb_pkg   libgnutls28-dev; deb_multi libgnutls30
    deb_multi --ignore libidn2-0-dev && deb_multi libgnutls28-dev

    deb_multi libjpeg62-turbo-dev libjpeg-turbo8-dev
    deb_multi libkrb5-dev
    deb_multi liblcms2-dev
    deb_multi libldap2-dev
    deb_multi libmpg123-dev
    deb_multi libncurses5-dev

    # The GStreamer development package can only be installed if the liborc
    # one supports multiarch
    deb_pkg   libgstreamer-plugins-base1.0-dev
    deb_multi libgstreamer-plugins-base1.0-0
    deb_multi --ignore liborc-0.4-dev && deb_multi libgstreamer-plugins-base1.0-dev

    deb_multi libopenal-dev
    deb_multi libosmesa6-dev
    deb_multi libpcap0.8-dev ||
        deb_multi libpcap0.8
    deb_multi libpng-dev libpng12-dev

    # The PulseAudio development package can only be installed if the Glib2
    # one supports multiarch
    deb_pkg libpulse-dev; deb_multi libpulse0
    deb_multi --ignore libglib2.0-dev && deb_multi libpulse-dev

    # On Debian 9 libsane-dev claims to support multiarch but is broken
    deb_blacklist libsane-dev 1.0.25-4.1 libsane-dev libsane

    # On Ubuntu 18.04 libsdl2-dev depends on libmirclient-dev which breaks
    # without warning in a multiarch configuration!
    deb_blacklist libmirclient-dev 0.31.1-0ubuntu1 libsdl2-dev libsdl2-2.0-0

    # The CUPS development package can only be installed if the libtiff and
    # libcupsimage ones support multiarch
    deb_pkg   libcups2-dev; deb_multi libcups2
    deb_multi libtiff-dev libtiff5-dev &&
        deb_multi --ignore libcupsimage2-dev libcupsimage-dev &&
        deb_multi libcups2-dev

    deb_multi libudev-dev
    deb_pkg   libunwind-dev # Wine only needs the 64-bit library
    deb_multi libusb-1.0-0-dev
    deb_multi libv4l-dev
    deb_multi libvkd3d-dev
    deb_multi libvulkan-dev
    deb_multi libx11-dev
    deb_multi libxcb1-dev
    deb_multi libxcomposite-dev
    deb_multi libxcursor-dev
    deb_multi libxi-dev
    deb_multi libxinerama-dev

    # The XML and XSLT development packages can only be installed if the ICU
    # one supports multiarch
    deb_pkg libxml2-dev;  deb_multi libxml2
    deb_pkg libxslt1-dev; deb_multi libxslt1.1
    deb_multi --ignore libicu-dev && {
        deb_multi libxml2-dev
        deb_multi libxslt1-dev
    }

    deb_multi  libxrandr-dev
    deb_multi  libxrender-dev
    deb_multi  libxxf86vm-dev
    deb_pkg    make
    deb_multi  ocl-icd-opencl-dev
    deb_multi  oss4-dev
    deb_pkg    prelink

    # For libnetapi
    if LANG= apt-cache depends samba-libs:i386 | egrep -q 'Depends: python3?-talloc:i386'
    then
        deb_pkg samba-dev
        pkgbroken="$pkgbroken samba-dev:i386"
    else
        deb_multi samba-dev
    fi

    deb_multi unixodbc-dev ||
        deb_multi libodbc1
}

deb_wine_extra()
{
    deb_pkg autoconf
    deb_pkg python3   # For make_vulkan
    deb_pkg unzip     # For make_unicode
    deb_pkg wget      # For make_unicode, make_opengl
}

deb_wine_tests()
{
    deb_pkg ttf-mscorefonts-installer
    deb_pkg winbind   # For ntlm_auth
}

deb_wt_daily()
{
    deb_pkg ntfs-3g
    deb_pkg time
}

deb_workarounds()
{
    local xsltconfig
    # Work around the missing or broken multiarch support where possible

    # Needed for Debian 10
    wt_create_sos libsdl2-dev libSDL2-2.0 # Broken up to 2.0.9
    wt_create_so libSDL2 libSDL2-2.0

    # Needed for Ubuntu 18.04
    wt_create_sos libcups2-dev libcups
    wt_create_sos libfontconfig1-dev libfontconfig
    wt_create_sos libfreetype6-dev libfreetype
    wt_create_sos libgnutls28-dev libgnutls
    wt_create_sos libpcap0.8-dev libpcap
    wt_create_sos libtiff-dev libtiff
    wt_create_sos libgstreamer-plugins-base1.0-dev libgstaudio-1.0 libgstbase-1.0 libgstreamer-1.0 libgstvideo-1.0

    # Ubuntu 18.04 is missing libxslt/xsltconfig.h
    xsltconfig="libxslt/xsltconfig.h"
    if [ -f "/usr/include/x86_64-linux-gnu/$xsltconfig" -a \
         ! -f "/usr/include/i386-linux-gnu/$xsltconfig" -a \
         ! -f "/usr/include/$xsltconfig" -a \
         -d "/usr/include/libxslt" ]
    then
        dry_run ln -s "../x86_64-linux-gnu/$xsltconfig" "/usr/include/$xsltconfig"
    elif [ -f "/usr/include/x86_64-linux-gnu/$xsltconfig" -a \
           -f "/usr/include/i386-linux-gnu/$xsltconfig" -a \
           -h "/usr/include/$xsltconfig" ]
    then
        echo "Removing the obsolete /usr/include/$xsltconfig symlink (was for libxslt1-dev)"
        dry_run rm "/usr/include/$xsltconfig"
    fi

    # Needed for Debian 9
    wt_create_sos libgphoto2-dev libgphoto2 libgphoto2_port
    wt_create_sos libjpeg62-turbo-dev libjpeg
    wt_create_sos libkrb5-dev libcom_err libgssapi_krb5 libk5crypto libkrb5
    wt_create_sos libpulse-dev libpulse
    wt_create_sos libsane-dev libsane
    wt_create_sos libxml2-dev libxml2
    wt_create_sos libxslt1-dev libxslt
    wt_create_sos unixodbc-dev libodbc

    # The GStreamer issues cannot be worked around
}


#####
#
# Command line processing
#
#####

wt_parse_cmdline()
{
    local arg
    local usage=""
    while [ $# -gt 0 ]
    do
        arg="$1"
        shift
        case "$arg" in
        --wine)       opt_wine="1" ;;
        --no-wine)    opt_wine="0" ;;
        --extra)      opt_wine_extra="1" ;;
        --no-extra)   opt_wine_extra="0" ;;
        --tests)      opt_wine_tests="1" ;;
        --no-tests)   opt_wine_tests="0" ;;
        --wt-daily)   opt_wt_daily="1" ;;
        --no-wt-daily) opt_wt_daily="0" ;;
        --all)        opt_wine="1"
                      opt_wine_extra="1"
                      opt_wine_tests="1"
                      opt_wt_daily="1"
                      ;;
        --packages)   opt_packages="1" ;;
        --workarounds) opt_workarounds="1" ;;
        --dry-run)    opt_dry_run="1" ;;
        --help|-h|-?)
            usage=0
            break
            ;;
        *)
            error "unknown option '$arg'"
            usage=2
            break
            ;;
        esac
    done

    if [ -z "$usage" ]
    then
        if [ -z "$opt_wine$opt_wine_extra$opt_wine_tests$opt_wt_daily" ]
        then
            opt_wine="1"
            opt_wine_extra="1"
            opt_wt_daily="0"
        fi
        if [ -z "$opt_packages$opt_workarounds" ]
        then
            opt_packages="1"
            opt_workarounds="1"
        fi
    fi

    if [ "$usage" = "0" ]
    then
        echo "Usage: $name0 [--no-wine] [--no-extra] [--tests] [--wt-daily] [--packages] [--workarounds] [--dry-run] [--help]"
        echo

        echo "Installs the packages needed to build the 32- and 64-bit versions of Wine. When possible applies workarounds if installing both the 32- and 64-bit development packages is impossible. Can also install some extra packages needed by the tests and the wt-daily scripts."
        echo
        echo "Default options:"
        echo "  --wine --extra --no-tests --no-wt-daily --packages --workarounds"
        echo "Tested on:"
        echo "  Debian 9 & 10, Linux Mint 19.03, Ubuntu 18.04 & 19.10."
        echo

        echo "Where:"
        echo "  --no-wine    Do not install the packages needed to compile Wine."
        echo "  --no-extra   Only install the packages needed to compile Wine, not those"
        echo "               needed to regenerate part of its source (autoconf, etc)."
        echo "  --tests      Install some packages needed to run the Wine tests."
        echo "  --wt-daily   Install the packages needed for the wt-daily scripts."
        echo "  --all        Same as --wine --extra --tests --wt-daily."
        echo "  --packages   Install the packages."
        echo "  --workarounds Apply workarounds for packages that don't support multiarch so"
        echo "               that both the 32- and 64-bit versions of Wine can be built."
        echo "  --dry-run    Only show which actions would be taken."
        echo "  --help, -h   Shows this help message."
        exit 0
    elif [ -n "$usage" ]
    then
        error "try '$name0 --help' for more information"
        exit $usage
    fi
}


#####
#
# Package installation
#
#####

wt_init()
{
    if [ -f "/etc/debian_version" ]
    then
        wt_platform="deb"
    else
        error "This Linux distribution is not supported."
        exit 1
    fi

    ${wt_platform}_init
    if [ -n "$opt_packages" ]
    then
        [ "$opt_wine" = "1" ] && ${wt_platform}_wine
        [ "$opt_wine_extra" = "1" ] && ${wt_platform}_wine_extra
        [ "$opt_wine_tests" = "1" ] && ${wt_platform}_wine_tests
        [ "$opt_wt_daily" = "1" ] && ${wt_platform}_wt_daily
    fi
}

wt_install()
{
    [ -n "$opt_packages" ] && ${wt_platform}_install
}

wt_post_install()
{
    [ -n "$opt_workarounds" ] && ${wt_platform}_workarounds
}

wt_epilogue()
{
    pkgbroken=`wt_pretty_list "$pkgbroken"`
    if [ -n "$pkgbroken" ]
    then
        echo
        echo "Could not install the following packages because they do not support multiarch."
        echo $pkgbroken
    fi

    pkgmissing=`wt_pretty_list "$pkgmissing"`
    if [ -n "$pkgmissing" ]
    then
        echo
        echo "Could not install the following packages because they are not available."
        echo $pkgmissing
    fi
}


#####
#
# Main
#
#####

if [ -z "$WT_INSTALL_DEV_LIB" ]
then
    opt_wine=""
    opt_wine_extra=""
    opt_wine_tests=""
    opt_wt_daily=""
    opt_packages=""
    opt_workarounds=""
    wt_parse_cmdline "$@"
    wt_init
    wt_install
    wt_post_install
    wt_epilogue
fi
