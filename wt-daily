#!/bin/sh
# Copyright (C) 2009-2016 Francois Gouget
#
# Orchestrates all the daily WineTest runs and related tasks.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
name0=`basename "$0"`
case "$0" in
/*)  dir0="$0" ;;
*/*) dir0=`pwd`/"$0" ;;
*)   dir0=`which "$0" || echo \`pwd\`/"$0"` ;;
esac
dir0=`realpath "$dir0" 2>/dev/null || echo "$dir0"`
dir0=`dirname "$dir0"`


#####
#
# Helpers and functions for the user tasks
#
#####

platform=`uname -s`
hostname=`hostname | cut -d. -f1`

# Try to set a nicer output for the time command
time=""
time true >/dev/null 2>&1 && time="time"
TIME="Took %E (user %U system %S)"
export TIME

flock="flock"
type flock >/dev/null 2>&1 || flock="$dir0/wt-flock"

nice="$dir0/wt-nice"
[ -x "$nice" ] || nice="nice -n 20"

error()
{
    echo "$name0:error:" "$@" >&2
}

opt_dry_run=""
dry_run()
{
    if [ -n "$opt_dry_run" ]
    then
        echo "$@" >&2
    else
        "$@"
    fi
}

run_ext()
{
    type "$1" >/dev/null 2>&1 && "$@"
}

kill_children()
{
    # $$ is not updated in subshells and $BASHPID is not portable :-(
    shell_pid=`sh -c 'echo $PPID'`
    [ -n "$shell_pid" -a "$shell_pid" != "1" ] && \
        kill `pgrep -P $shell_pid 2>/dev/null` 2>/dev/null
    exit 0
}

# On FreeBSD and Mac OS X the shell ignores signals not only while running
# commands, but also while in 'wait'.
interruptible_wait()
{
    while kill -0 "$1" 2>/dev/null
    do
        sleep 1
    done
    wait "$1"
}

# Use run() to ensure the specified command will be terminated even if the
# shell is killed.
#
# WARNING:
#   This overwrites the INT and TERM traps so it may be necessary to
#   re-set them after calling run() !!!
#   By default they are reset to their default handler.
run()
{
    trap kill_children INT TERM
    "$@" &
    interruptible_wait $!
    rc=$?
    trap - INT TERM
    return $rc
}

do_pause()
{
    inpause=""
    while true
    do
        run=`cat "$test_root/run" 2>/dev/null`
        if [ "$run" = "cancel" ]
        then
            rm -f "$test_root/run"
            echo "aborting this $name0 run"
            exit 0
        elif [ "$run" != "pause" ]
        then
            break
        fi
        [ -z "$inpause" ] && echo "$name0: Pausing the tests..."
        inpause="1"
        sleep 10
    done
    [ -n "$inpause" ] && echo "$name0: Resuming the tests..."
}

# Use register_update_task() to identify background tasks that must be
# completed before building Wine.
update_tasks=""
register_update_task()
{
    update_tasks="$update_tasks $1"
}

# Use register_build_task() to identify background tasks that must be
# completed before running the Wine tests.
build_tasks=""
register_build_task()
{
    build_tasks="$build_tasks $1"
}

# Use register_interactive_task() to identify interactive background tasks that
# must be completed before starting the Wine tests.
interactive_tasks=""
register_interactive_task()
{
    interactive_tasks="$interactive_tasks $1"
}

# Use register_other_task() to identify background tasks that must be
# completed before the script exits (and shutdowns or reboots the machine for
# instance).
other_tasks=""
register_other_task()
{
    other_tasks="$other_tasks $1"
}

# Wait for tasks even if they are not immediate children of this shell
wait_for()
{
    for task in "$@"
    do
        wait $task 2>/dev/null
        if [ $? -ne 0 ]
        then
            while kill -0 $task 2>/dev/null && sleep 10
            do
                true
            done
        fi
    done
}


######
#
# Read the configuration file
#
######

configured=""
if [ -f "$dir0/$name0.config" ]
then
    . "$dir0/$name0.config"
    configured=1
fi
if [ -f "$dir0/$name0.$hostname" ]
then
    . "$dir0/$name0.$hostname"
    configured=1
fi
if [ -z "$configured" ]
then
    error "could not find the configuration file"
    exit 1
fi

[ -n "$test_root" ] || test_root="$dir0/winetest"

# Allow pre-pausing but not pre-canceling
run=`cat "$test_root/run" 2>/dev/null`
[ "$run" = "cancel" ] && rm -f "$test_root/run"


#####
#
# Perform the self-update
#
#####

# The self-update must be performed after reading the configuration file (so
# it can set the self_update default) but before parsing the command line so
# that "$@" is still usable.

self_update()
{
    # Run the commands in a subshell so as to not impact the
    # current directory even if one of them fails.
    (
        set -e
        cd "$dir0"
        git fetch
        oldcommit=`git rev-parse HEAD`
        # Without $upstream git systematically does a rebase, even if the
        # branch is already up to date.
        upstream=`git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || true`
        if ! git rebase -q $upstream
        then
            git rebase --abort
            exit 1
        fi
        [ `git rev-parse HEAD` != "$oldcommit" ]
    )
}

case "$1" in
    --self-update)
        self_update="1"
        shift
        ;;
    --no-self-update)
        self_update=""
        shift
        ;;
    --pause|--cancel|--restart|--resume)
        self_update=""
        ;;
esac
if [ -n "$self_update" ]
then
    self_update && exec "$dir0/$name0" "$@"
fi


#####
#
# Command line processing
#
#####

opt_update=""
opt_build=""
opt_test=""
opt_auto_test=""
opt_otheros=""
opt_auto_otheros=""
opt_shutdown=""
opt_run=""
usage=""

parse_arguments()
{
    while [ $# -gt 0 ]
    do
        arg="$1"
        shift
        case "$arg" in
            --update)      [ -z "$opt_update" ] && opt_update="1" ;;
            --no-update)   [ -z "$opt_update" ] && opt_update="0" ;;
            --build)       [ -z "$opt_build" ] && opt_build="1" ;;
            --no-build)    [ -z "$opt_build" ] && opt_build="0" ;;
            --test)        [ -z "$opt_test" ] && opt_test="1" ;;
            --no-test)     [ -z "$opt_test" ] && opt_test="0" ;;
            --auto-test)   [ -z "$opt_auto_test" ] && opt_auto_test="1" ;;
            --otheros)     [ -z "$opt_otheros" ] && opt_otheros="1" ;;
            --no-otheros)  [ -z "$opt_otheros" ] && opt_otheros="0" ;;
            --auto-otheros) [ -z "$opt_auto_otheros" ] && opt_auto_otheros="1" ;;
            --shutdown)    [ -z "$opt_shutdown" ] && opt_shutdown="1" ;;
            --no-shutdown) [ -z "$opt_shutdown" ] && opt_shutdown="0" ;;
            --pause)       [ -z "$opt_run" ] && opt_run="pause" ;;
            --cancel)      [ -z "$opt_run" ] && opt_run="cancel" ;;
            --resume|--restart) [ -z "$opt_run" ] && opt_run="resume" ;;
            --dry-run)     [ -z "$opt_dry_run" ] && opt_dry_run="1" ;;
            --help|-h|-?)
                usage=0
                break
                ;;
            *)
                if ! type is_extra_option >/dev/null 2>&1 || ! is_extra_option "$arg"
                then
                    error "unknown option '$arg'"
                    usage=2
                    break
                fi
        esac
    done
}

parse_arguments "$@"
parse_arguments $default_options

if [ "$usage" = "0" ]
then
    echo "Usage: $name0 [--self-update|--no-self-update] [--update|--no-update]"
    echo "                [--build|--no-build] [--test|--no-test] [--auto-test]"
    echo "                [--otheros|--no-otheros] [--auto-otheros]"
    echo "                [--shutdown|--no-shutdown] [--dry-run]"
    echo "or     $name0 [--pause|--cancel|--resume] [--help]"
    echo

    echo "Orchestrates all the daily WineTest runs and related tasks."
    echo

    echo "Where:"
    echo "  --self-update Update the $name0 checkout. When used this must be the first"
    echo "               option."
    echo "  --update     Fetch and rebase to the latest Wine."
    echo "  --build      Rebuild Wine."
    echo "  --test       Run WineTest."
    echo "  --auto-test  Don't prompt the user for the right time to start the tests."
    echo "  --otheros    Reboots to run the tests on another OS. This is on by default."
    echo "  --auto-otheros Don't let the user pick which other OS to run the tests on."
    echo "  --shutdown   Perform the configured shutdown operation once done."
    echo "  --dry-run    Show what would happen but do nothing."
    echo "  --pause      Request the running $name0 instance to make a pause at its earliest convenience."
    echo "  --resume    Request the running $name0 instance to resume the tests."
    echo "  --cancel     Request the running $name0 instance to cancel the remaining tests at its earliest convenience."
    run_ext print_extra_usage
    echo "  --help, -h   Shows this help message."
    exit 0
elif [ -n "$usage" ]
then
    error "try '$name0 --help' for more information"
    exit $usage
fi

# Perform some consistency checks

check_tag()
{
    _tag="$1"
    shift
    echo "$_tag" | perl -ne 'exit(/^[.0-9a-zA-Z-]{0,20}$/ ? 0 : 1)'
    if [ $? -ne 0 ]
    then
        error "the '$_tag' tag is invalid"
        usage=2
    fi
    for t in "$@"
    do
        if [ -n "$_tag" -a "$_tag" = "$t" ]
        then
            error "the '$t' tag has been duplicated"
            usage=2
        fi
    done
}

if [ -z "$usage" ]
then
    if [ -n "$opt_pause$opt_resume$opt_cancel" ]
    then
        if [-n "$opt_update$opt_build$opt_test$opt_auto_test$opt_otheros$opt_auto_otheros$opt_shutdown" ]
        then
            error "--pause, --resume and --cancel are incompatible with the other options"
            usage=2
        fi

    elif [ -z "$opt_run" ]
    then
        if [ -z "$opt_update$opt_build$opt_test$opt_otheros" ]
        then
            opt_update="1"
            opt_build="1"
            opt_test="1"
            opt_otheros="1"
        elif [ "$opt_update" != "1" -a "$opt_build" != "1" -a \
               "$opt_test" != "1" -a "$opt_otheros" != "1" ]
        then
            [ -z "$opt_update" ] && opt_update="1"
            [ -z "$opt_build" ] && opt_build="1"
            [ -z "$opt_test" ] && opt_test="1"
            [ -z "$opt_otheros" ] && opt_otheros="1"
        fi

        if [ -z "$email" ]
        then
            error "you must provide your email address to run the Wine tests"
            usage=2
        fi
        if [ -z "$tag$tagmac$tagwow32$tagwow64$otheroses" ]
        then
            error "no Wine tests have been set to run"
            usage=2
        fi
        check_tag "$tag"
        check_tag "$tagmac" "$tag"
        check_tag "$tagwow32" "$tagmac" "$tag"
        check_tag "$tagwow64" "$tagwow32" "$tagmac" "$tag"

    fi
fi

if [ -n "$usage" ]
then
    error "try '$name0 --help' for more information"
    exit $usage
fi

case "$opt_run" in
    pause) echo "pause" >"$test_root/run"; exit 0 ;;
    cancel) echo "cancel" >"$test_root/run"; exit 0 ;;
    resume) rm -f "$test_root/run"; exit 0 ;;
esac


# Initialization

cleanup()
{
    kill $interactive_tasks $ready_pid $notify_pid 2>/dev/null
    rm -f "$test_root/$name0.interactive" "$test_root/$name0.otheros"
    rm -f "$test_root/$name0.pid" "$test_root/$name0.ready"
    rm -f "$test_root/$name0.tests"
    # Leave $test_root/run
}

[ -d "$test_root" ] || mkdir "$test_root"
if ! cd "$test_root"
then
    error "could not create the '$test_root' directory"
    exit 1
fi

(
    run_ext trace "Waiting for $name0.lock"
    "$flock" 3
    pid=`cat "$test_root/$name0.pid" 2>/dev/null`
    if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null
    then
        echo "$name0 is already running, exiting"
        run_ext trace "Exiting $name0 (already running)"
        exit 1
    fi
    cleanup
    echo "$$" >"$test_root/$name0.pid"
) 3>"$test_root/$name0.lock" || exit 0
rm -f "$test_root/$name0.lock"

# Clean up on exit
abort()
{
    echo "cancel" >"$test_root/run"
    cleanup
}

trap abort INT TERM EXIT
run_ext trace "Starting $name0"


#####
#
# Helper functions for running the tests on another OS
#
#####

otheros_file="$test_root/$name0.otheros"

# Returns the latest Wine commit as of the last time the tests were run
# on this other OS.
get_otheros_status()
{
    base=`basename "$1" .wtimage`
    cat "$test_root/otheroses/$base.commit" 2>/dev/null
}

# See get_otheros_status().
set_otheros_status()
{
    [ -d "$test_root/otheroses" ] || mkdir "$test_root/otheroses"
    base=`basename "$2" .wtimage`
    echo "$1" >"$test_root/otheroses/$base.commit"
}

# Pick an OS image to restore
select_otheros()
{
    if [ -n "$otheroses" ]
    then
        for image in $otheroses
        do
            commitid=`get_otheros_status "$image"`
            if [ "$commitid" = "$latest_commitid" ]
            then
                echo "tests were run for '$image' already, skipping it"
            elif [ ! -x "$image" ]
            then
                error "'$image' is not executable, skipping it"
            elif [ -n "$opt_auto_otheros" ]
            then
                echo "$image" >"$otheros_file"
                break
            # Note: select_otheros() is only called in a subshell
            # -> no trap here (see run())
            elif run "$dir0/wt-ask" "Run the tests on '$image'?"
            then
                echo "$image" >"$otheros_file"
                break
            fi
        done
    fi
}

restore_otheros()
{
    image="$1"
    do_pause
    commitid=`get_otheros_status "$image"`
    if [ "$commitid" = "$latest_commitid" ]
    then
        echo "Tests were run for '$image' already, skipping it"
        return 1
    fi
    if [ ! -x "$image" ]
    then
        error "'$image' is not executable, skipping it"
        return 1
    fi

    echo "Preparing to run the tests on '$image'..."
    run_ext trace "Restoring" `basename "$image"`
    if dry_run $time $nice sudo "$image" --restore && \
        dry_run $nice sudo "$image" --grub
    then
        run_ext trace "Restored" `basename "$image"`
        return 0
    fi

    # Don't try again until we have another Wine version
    dry_run set_otheros_status "$latest_commitid" "$image"
    return 1
}

# This sets up another disk image in case we failed to set up the first one
prepare_any_otheros()
{
    for image in $otheroses
    do
        if restore_otheros "$image"
        then
            echo "$image" >"$otheros_file"
            break
        fi
    done
}


#####
#
# Ask whether to automatically run the tests
#
#####

do_pause
ready_lock="$test_root/$name0.ready"
{
    # flock does not propagate signals to its child process
    # so run the sleep command ourselves.
    "$flock" 3
    run sleep 86400
    # traps don't matter anymore (see run())
} 3>"$ready_lock" &
ready_pid=$!

pre_interactive_lock="$test_root/$name0.interactive"
{
    "$flock" 3
    run sleep 86401
    # traps don't matter anymore (see run())
} 3>"$pre_interactive_lock" &
pre_interactive_pid=$!
# Give enough time for the above tasks to take their respective locks
sleep 1

{
    run_ext pre_interactive
    kill $pre_interactive_pid

    if [ \( "$opt_test" = "1" -a -z "$opt_auto_test" \) -o \
         \( "$opt_otheros" = "1" -a -z "$opt_auto_otheros" -a -n "$otheroses" \) ]
    then
        storage="$test_root/$name0.tests"
        {
            # This question is automatically canceled once the tests are ready
            # to run.
            run "$dir0/wt-ask" "Automatically run the tests?" && \
                echo "auto" >"$storage"
            # traps don't matter anymore (see run())
        } &
        ask_auto_pid=$!
        {
            # Make sure the user has time to answer the 'Automatically run the
            # tests?' question even if the build completed already.
            sleep 30

            "$flock" "$ready_lock" true
            echo "auto" >"$storage"
            kill $ask_auto_pid 2>/dev/null
        } &
        wait $ask_auto_pid
        answer=`cat "$storage" 2>/dev/null`
        if [ "$answer" != "auto" ]
        then
            # This question blocks the tests until answered.
            run "$dir0/wt-ask" "Run the tests now?" || \
                "$dir0/$name0" --cancel
            # subshell -> no trap here (see run())
        fi
    fi

    run_ext post_interactive
} &
register_interactive_task $!


#
# Update Wine
#

[ -d "src" ] || git clone git://source.winehq.org/git/wine.git src
if ! cd "$test_root/src"
then
    error "could not check out Wine"
    exit 1
fi

do_pause
run_ext pre_update

upstream=`git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || true`
if [ "$opt_update" = "1" ]
then
    do_pause
    git fetch

    git diff >"$name0.$$"
    if [ -s "$name0.$$" ]
    then
        mv "$name0.$$" "$name0-backup.diff"
        git reset --hard HEAD
    else
        rm "$name0.$$"
    fi

    do_pause
    if ! git rebase $upstream
    then
        error "the rebase failed. Finish the merge manually!"
        tag=""
        tagmac=""
        tagwow32=""
        tagwow64=""
    fi
fi

wait_for $update_tasks

# Check if there are still tests to run
latest_commitid=`git rev-parse @{u}`
[ -n "$tag" -a "`cat \"$test_root/wine/wt-bot-$tag.commit\" 2>/dev/null`" = "$latest_commitid" ] && tag=""
[ -n "$tagmac" -a "`cat \"$test_root/wine/wt-bot-$tagmac.commit\" 2>/dev/null`" = "$latest_commitid" ] && tagmac=""
[ -n "$tagwow32" -a "`cat \"$test_root/wow64/wt-bot-$tagwow32.commit\" 2>/dev/null`" = "$latest_commitid" ] && tagwow32=""
[ -n "$tagwow64" -a "`cat \"$test_root/wow64/wt-bot-$tagwow64.commit\" 2>/dev/null`" = "$latest_commitid" ] && tagwow64=""


#
# Restore the other OS (Windows) image
#

if [ "$opt_otheros" = "1" -a -n "$otheroses" ]
then
    if [ -n "$opt_auto_otheros" ]
    then
        prepare_any_otheros &
        register_build_task $!
    else
        {
            "$flock" "$pre_interactive_lock" true
            select_otheros &
            ask_otheros_pid=$!
            {
                "$flock" "$ready_lock" true
                kill $ask_otheros_pid 2>/dev/null
            } &
            wait $ask_otheros_pid

            image=`cat "$otheros_file" 2>/dev/null`
            if [ -n "$image" ]
            then
                restore_otheros "$image" || rm -f "$otheros_file"
            fi
        } &
        register_interactive_task $!
    fi
fi


#####
#
# Build Wine
#
#####

do_pause
run_ext pre_build

if [ "$opt_build" = "1" ]
then
    if [ -n "$tag$tagmac" ]
    then
        do_pause
        echo "$hostname - 32-bit Build"
        run_ext trace "32-bit Build"
        [ -d "$test_root/wine" ] || mkdir "$test_root/wine"
        dry_run $time $nice "$dir0/wt-bot" --dir "$test_root/wine" --build --build-retry
        if [ $? -ne 0 ]
        then
            echo "The 32-bit build failed. Skipping the 32-bit tests."
            tag=""
            tagmac=""
        fi
    fi

    if [ -n "$tagwow32$tagwow64" ]
    then
        do_pause
        echo
        echo "$hostname - WoW 32 & 64-bit Build"
        run_ext trace "WoW 32 & 64-bit Build"
        [ -d "$test_root/wow32" ] || mkdir "$test_root/wow32"
        [ -d "$test_root/wow64" ] || mkdir "$test_root/wow64"
        dry_run $time $nice "$dir0/wt-bot" --dir "$test_root/wow64" --build --build-retry --wow
        if [ $? -ne 0 ]
        then
            echo "The WoW build failed. Skipping the WoW tests."
            tagwow32=""
            tagwow64=""
        fi
    fi
fi

wait_for $build_tasks


#####
#
# Run the tests
#
#####

# Always give a heads up to the user, whether we're running the tests,
# rebooting to another OS, or running the pre_test()/post_test() tasks.
do_pause
"$dir0/wt-notify" "Running the tests in 30 seconds..." &
notify_pid=$!
sleep 30

do_pause
kill $notify_pid 2>/dev/null
kill $ready_pid
wait_for $interactive_tasks

do_pause
run_ext pre_tests

if [ "$opt_test" = "1" ]
then
    if [ -n "$tagmac" ]
    then
        # Run the Mac driver tests before another test starts X11 / XQuartz
        do_pause
        echo "$hostname - WineTest (Mac driver)"
        run_ext trace "WineTest (Mac driver)"
        run_ext pre_test "mac"
        dry_run $time "$dir0/wt-bot" --skip-old --email "$email" \
                --submit --submit-urls "$submit_urls" \
                --new-wineprefix --wineprefix "$test_root/wineprefix" \
                --dir "$test_root/wine" --macdrv --winetest "$tagmac" \
                --desc "$descmac" --exclude "$excludemac"
        run_ext post_test "mac"
    fi

    if [ -n "$tag" ]
    then
        do_pause
        echo "$hostname - WineTest"
        run_ext trace "WineTest"
        run_ext pre_test "win32"
        dry_run $time "$dir0/wt-bot" --skip-old --email "$email" \
                --submit --submit-urls "$submit_urls" \
                --new-wineprefix --wineprefix "$test_root/wineprefix" \
                --dir "$test_root/wine" --winetest "$tag" \
                --desc "$desc" --exclude "$exclude"
        run_ext post_test "win32"
    fi

    if [ -n "$tagwow64" ]
    then
        do_pause
        echo "$hostname - WoW 64-bit WineTest"
        run_ext trace "WoW 64-bit WineTest"
        run_ext pre_test "wow64"
        dry_run $time "$dir0/wt-bot" --skip-old --email "$email" \
                --submit --submit-urls "$submit_urls" \
                --new-wineprefix --wineprefix "$test_root/wineprefix" \
                --dir "$test_root/wow64" --winetest "$tagwow64" \
                --desc "$descwow64" --exclude "$excludewow64"
        run_ext post_test "wow64"
    fi

    if [ -n "$tagwow32" ]
    then
        do_pause
        echo "$hostname - Wow 32-bit WineTest"
        run_ext trace "WoW 32-bit WineTest"
        run_ext pre_test "wow32"
        # Note: We intentionally don't reset the WinePrefix for this test
        dry_run $time "$dir0/wt-bot" --skip-old --email "$email" \
                --submit --submit-urls "$submit_urls" \
                --wineprefix "$test_root/wineprefix" \
                --dir "$test_root/wow64" --winetest "$tagwow32" \
                --desc "$descwow32" --exclude "$excludewow32" \
                --testexe "$test_root/wow32/programs/winetest/winetest.exe"
        run_ext post_test "wow32"
    fi

    rm -rf "$test_root/wineprefix"
fi


#####
#
# Shutdown or reboot
#
#####

do_pause
run_ext post_tests

wait_for $other_tasks

image=`cat "$otheros_file" 2>/dev/null`
if [ -n "$image" ]
then
    # We have no way to verify that the tests will indeed run successfully on
    # this OS after the reboot. So what this really indicates is that we gave
    # it a try.
    dry_run set_otheros_status "$latest_commitid" "$image"
    shutdown="reboot"
fi

do_pause
cleanup
[ "$opt_shutdown" = "0" ] && shutdown=""
if [ -n "$shutdown" ]
then
    run_ext trace "wt-power $shutdown"
    dry_run "$dir0/wt-power" "$shutdown"
fi
run_ext trace "Exiting $name0"
